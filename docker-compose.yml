services:
  # --- Service Discovery ---
  eureka-server:
    image: eureka-server:1.0.0
    container_name: eureka_server
    hostname: eureka-server
    ports:
      - "8761:8761"
    environment:
      SPRING_SECURITY_USER_NAME: admin
      SPRING_SECURITY_USER_PASSWORD: eureka123
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "wget", "--spider", "http://localhost:8761/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # --- Databases ---
  mysql-db:
    image: mysql:latest
    container_name: mysql_db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 123 # Đặt mật khẩu root
      # MYSQL_DATABASE: account_db,security_db,... # Có thể tạo DB ban đầu nếu muốn
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-p$MYSQL_ROOT_PASSWORD" ]
      interval: 10s
      timeout: 5s
      retries: 5

  mongo-db:
    image: mongo:latest
    container_name: mongo_db
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "mongosh", "--eval", "db.adminCommand('ping')" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis-cache:
    image: redis:alpine #redis:8.0-M04-alpine3.21
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes: #volume cho redis
      - redis_data:/data
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Search Engine ---
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.9.0 # Sử dụng phiên bản cụ thể
    container_name: elasticsearch_node
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m # Giới hạn RAM cho local
      - xpack.security.enabled=false # Tắt security cho local dev đơn giản
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=5s" ]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Messaging ---
  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.5
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
    networks:
      - spring-cloud-network
    healthcheck:
      test: [ "CMD-SHELL", "echo 'ruok' | nc localhost 2181 | grep imok" ]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.6.5
    container_name: kafka_broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"       # Port cho kết nối bên trong Docker network
      - "29092:29092"     # Port cho kết nối từ bên ngoài Docker (Host/IDE)
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      # QUAN TRỌNG: Cho phép kết nối từ cả bên trong và bên ngoài Docker network
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      # KAFKA_CREATE_TOPICS: "topic1:1:1,topic2:1:1" # Tùy chọn: Tự tạo topics khi khởi động
    networks:
      - spring-cloud-network
    healthcheck: # Healthcheck đơn giản cho Kafka
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list" ]
      interval: 30s # Check ít thường xuyên hơn
      timeout: 10s
      retries: 5

volumes: # Khai báo volumes để giữ dữ liệu khi container bị xóa/tạo lại
  mysql_data:
  mongo_data:
  redis_data:
  es_data:

networks: # Định nghĩa network chung cho các service
  spring-cloud-network:
    driver: bridge

# Service Eureka tạm thời bị loại bỏ, sẽ chạy riêng ở bước sau
#  eureka-server:
#    image: eureka-server:1.0.0
#    container_name: eureka_server
#    hostname: eureka-server
#    ports:
#      - "8761:8761"
#    environment:
#      SPRING_SECURITY_USER_NAME: admin
#      SPRING_SECURITY_USER_PASSWORD: eureka123
#    networks:
#      - spring-cloud-network
#    healthcheck:
#      test: [ "CMD", "wget", "--spider", "http://localhost:8761/actuator/health" ]
#      interval: 30s
#      timeout: 10s
#      retries: 3